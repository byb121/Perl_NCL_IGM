#!/usr/bin/perl
use strict;
use warnings;
use Getopt::Long;

my $vcf_files;
my $reference_file="/users/a5907529/lustre/Yaobo/GenomeData/GATK_bundle/ucsc.hg19.4GATK.fasta";
my $output_file="RAF_table.txt";

GetOptions('help|?' => \$help, 'vcfs=s' => \$vcf_files,  'output=s' => \$output_file);

#get the reference genome
my %hg19;
my $chr_ref;
open REF, "$reference_file" or die "Cannot opne the reference file: $reference_file\n";
while (my $line=<REF>) {
	chomp $line;
	if ($line =~ m/^\>/) {
		$line =~ s/^\>//;
		$chr_ref = $line;
		print "Reading reference for $chr_ref....\n";
	} else {
		if (exists $hg19{$chr_ref}) {
			$hg19{$chr_ref} = $hg19{$chr_ref}.$line;
		} else {
			$hg19{$chr_ref} = $line;
		}
	}
}
close REF;
print "Reference is imported\n";


#Read VCFs and Get Frequency for postions recorded
#get the VCF files
my %AMR_Freq;
my %AFR_Freq;
my %ASN_Freq;
my %EUR_Freq;

my @vcfs=split(',', $vcf_files);
VCF_LOOP: foreach my $vcf (@vcfs) {
	print "Reading vcf file: $vcf\n";
	my @sample_select_index;
	open VCF, $vcf or die "Cannot open the vcf file $vcf\n";
	LINE_LOOP: while (my $line = <VCF> ) {
		if ($line =~ /^\#/) {
			 next;
		} else {
			chomp $line;
			my @words = split (/\t/, $line);
			if ($words[6] ne "PASS") { # only variants that passed the filter
				next LINE_LOOP;
			}
			if ($words[3] =~ m/^(A|T|G|C)$/i && $words[4] !~ m/,/) {
				# compare the ref base to the reference
				my ($chr, $pos, $rs, $ref, $var);
				if ($words[0] =~ m/MT/) { ###################could be different on different sets
					$chr="chrM";
				} else {
					$chr="chr".$words[0];
				}
				$pos = $words[1];
				$rs = $words[2];
				$ref = $words[3];
				$var = $words[4];
				if ($ref eq substr($hg19{$chr}, $pos-1, 1)) {
					##############################start to count frequency of samples
					my $info = $words[7];
					my @temp_2 = split (";", $info);
					my ($amr, $asn, $afr, $eur);
					for (my $i=0;$i<scalar @temp_2; $i++) {
						if ($temp_2[$i] =~ m/AMR\_AF\=/) {
							$amr = $temp_2[$i];
							$amr =~ s/AMR\_AF\=//;
						} elsif ($temp_2[$i] =~ m/ASN\_AF\=/) {
							$asn = $temp_2[$i];
							$asn =~ s/ASN\_AF\=//;
						} elsif ($temp_2[$i] =~ m/AFR\_AF\=/) {
							$afr = $temp_2[$i];
							$afr =~ s/AFR\_AF\=//;
						} elsif ($temp_2[$i] =~ m/EUR\_AF\=/) {
							$eur = $temp_2[$i];
							$eur =~ s/EUR\_AF\=//;
						} 
					}
					
					if (exists $AMR_Freq{$chr}{$pos}{$rs}{$ref}{$var}) {
						print "Error: Duplicate position info on $chr: $pos. Last reported kept.\n"
					} else {
						$AMR_Freq{$chr}{$pos}{$rs}{$ref}{$var} = $eur;
					}
					
					if (exists $ASN_Freq{$chr}{$pos}{$rs}{$ref}{$var}) {
						print "Error: Duplicate position info on $chr: $pos. Last reported kept.\n"
					} else {
						$ASN_Freq{$chr}{$pos}{$rs}{$ref}{$var} = $eur;
					}
					
					if (exists $AFR_Freq{$chr}{$pos}{$rs}{$ref}{$var}) {
						print "Error: Duplicate position info on $chr: $pos. Last reported kept.\n"
					} else {
						$AFR_Freq{$chr}{$pos}{$rs}{$ref}{$var} = $eur;
					}
					
					if (exists $EUR_Freq{$chr}{$pos}{$rs}{$ref}{$var}) {
						print "Error: Duplicate position info on $chr: $pos. Last reported kept.\n"
					} else {
						$EUR_Freq{$chr}{$pos}{$rs}{$ref}{$var} = $eur;
					}
					
				} else {
					next LINE_LOOP;
				}
				
			}
			
		}
	}
	close VCF;
}




#print output;
open OUTPUT, ">$output_file" or die "Cannot open file $output_file to output. \n";
foreach my $chr (keys %EUR_Freq) {
	foreach my $pos (sort  {$a <=> $b} keys %{$EUR_Freq{$chr}}) {
		foreach my $rs (keys %{$EUR_Freq{$chr}{$pos}}) {
			foreach my $ref (keys %{$EUR_Freq{$chr}{$pos}{$rs}}) {
				foreach my $var (keys %{$EUR_Freq{$chr}{$pos}{$rs}{$ref}}) {
					print OUTPUT "$chr\t$pos\t$rs\t$ref\t$var\t".$EUR_Freq{$chr}{$pos}{$rs}{$ref}{$var}."\n"
				}
			}
		}
	}
} 
close OUTPUT;

exit;

